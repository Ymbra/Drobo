#!/usr/bin/env php
<?php

use Consolidation\AnnotatedCommand\CommandFileDiscovery;
use Robo\Runner;

// If we're running from phar load the phar autoload file.
$pharPath = \Phar::running(true);
if ($pharPath) {
  $autoloaderPath = "$pharPath/vendor/autoload.php";
} else {
  if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    $autoloaderPath = __DIR__ . '/vendor/autoload.php';
  } elseif (file_exists(__DIR__.'/../../autoload.php')) {
    $autoloaderPath = __DIR__ . '/../../autoload.php';
  } elseif (file_exists(__DIR__.'/../../../autoload.php')) {
    $autoloaderPath = __DIR__ . '/../../../autoload.php';
  } else {
    die("Could not find autoloader. Run 'composer install'.");
  }
}
$classLoader = require $autoloaderPath;

// Customization variables
$appName = "Drupal Robo";
$appVersion = trim(file_get_contents(__DIR__ . '/../VERSION'));

// Discover task classes:
$discovery = new CommandFileDiscovery();
$discovery->setSearchPattern('*Commands.php');
$commandClasses = $discovery->discover(__DIR__ . '/../src/Commands', '\Ymbra\DrupalRoboTasks\Commands');
$customCommandClasses = $discovery->discover(__DIR__ . '/../../../../drobo/Commands', '\Ymbra\DrupalRoboTasks\Commands');
$commandClasses = array_merge($customCommandClasses, $commandClasses);

// Ensure that any discovered class that is not part of the autoloader is, in fact, included.
foreach ($commandClasses as $file => $commandClass) {
  if (!class_exists($commandClass)) {
    include $file;
  }
}

$selfUpdateRepository = 'ymbra/drupalrobotasks';
$configurationFilename = 'config.yml';

// Define our Runner, and pass it the command classes we provide.
$runner = new Runner($commandClasses);
$runner
  ->setSelfUpdateRepository($selfUpdateRepository)
  ->setConfigurationFilename($configurationFilename)
  ->setClassLoader($classLoader);

// Execute the runner and return the result.
$output = new \Symfony\Component\Console\Output\ConsoleOutput();
$statusCode = $runner->execute($argv, $appName, $appVersion, $output);
exit($statusCode);
